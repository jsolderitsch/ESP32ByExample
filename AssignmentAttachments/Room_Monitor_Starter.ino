#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Room_Monitor_Thing"
  https://create.arduino.cc/cloud/things/8136bd2b-7ee0-4054-9f23-2dadf4e90cb4 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String elapsedTime;
  int humidity;
  bool blueLED;
  bool highHumidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include "DHT.h"
#include "Button2.h"

#define DHTPIN 19       // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11  // DHT 11
// LED configs
#define BLUE 25
#define YELLOW 15
#define TOP_GREEN 21
#define TOP_RED 26
#define BOTTOM_RED 27
#define BOTTOM_GREEN 4
// Arduino pins where the buttons are connected to
#define BOTTOM_RIGHT 14
#define BOTTOM_LEFT 36
#define TOP_RIGHT 34
#define TOP_LEFT 33
#define MIDDLE_RIGHT 32
#define MIDDLE_LEFT 39

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);
unsigned long timer = 0;

float h;
float t;
float f;

Button2 topRight, topLeft;
DHT dht(DHTPIN, DHTTYPE);

// Callback function to be called when topRight is pressed
void onTopRightPressed(Button2& btn) {
  display.println("Do Something here");
  display.display();
// ???
}

// Callback function to be called when topLeft is pressed
void onTopLeftPressed(Button2& btn) {
  display.println("Blue Switch Pressed");
  display.display();
  digitalWrite(BLUE, !digitalRead(BLUE));
  blueLED = !blueLED;
}

String getReadableTime() {
  String readableTime = "";
  unsigned long currentMillis;
  unsigned long seconds;
  unsigned long minutes;
  unsigned long hours;
  unsigned long days;

  currentMillis = millis();
  seconds = currentMillis / 1000;
  minutes = seconds / 60;
  hours = minutes / 60;
  days = hours / 24;
  currentMillis %= 1000;
  seconds %= 60;
  minutes %= 60;
  hours %= 24;

  if (days > 0) {
    readableTime = String(days) + " ";
  }

  if (hours > 0) {
    readableTime += String(hours) + ":";
  }

  if (minutes < 10) {
    readableTime += "0";
  }
  readableTime += String(minutes) + ":";

  if (seconds < 10) {
    readableTime += "0";
  }
  readableTime += String(seconds);
  return readableTime;
}

void setup() {
  dht.begin();
  Wire.begin();

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {  // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }

  display.display();
  delay(2000);  // Pause for 2 seconds
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setRotation(0);
  display.clearDisplay();
  display.setCursor(0, 0);

  // initialize LED pins
  pinMode(BLUE, OUTPUT);
  pinMode(YELLOW, OUTPUT);
  pinMode(BOTTOM_RED, OUTPUT);
  pinMode(BOTTOM_GREEN, OUTPUT);
  pinMode(TOP_RED, OUTPUT);
  pinMode(TOP_GREEN, OUTPUT);
  digitalWrite(BLUE, LOW);
  digitalWrite(YELLOW, LOW);
  digitalWrite(BOTTOM_RED, LOW);
  digitalWrite(BOTTOM_GREEN, LOW);
  digitalWrite(TOP_RED, LOW);
  digitalWrite(TOP_GREEN, LOW);

  // Initialize the topRight button
  topRight.begin(TOP_RIGHT);
  // Initialize the topLeft button
  topLeft.begin(TOP_LEFT);
  // Add the callback function to be called when topRight is pressed.
  topRight.setTapHandler(onTopRightPressed);
  // Add the callback function to be called when topLeft is pressed.
  topLeft.setTapHandler(onTopLeftPressed);

  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, doThisOnDisconnect);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  // Continuously read the status of the buttons
  topRight.loop();
  topLeft.loop();

  h = dht.readHumidity() + 10;
  t = dht.readTemperature();
  f = dht.readTemperature(true);  
  if (isnan(h) || isnan(t) || isnan(f))  // Check if any reads failed and exit early (to try again).
  {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  if ((millis() - timer) > 5000) {  // publish data every 5 seconds
    elapsedTime = getReadableTime();
    int intF = f + 0.5;
    Serial.print(F("Time: "));
    Serial.print(elapsedTime);
    Serial.print(F(" Humidity: "));
    Serial.print(h);
    Serial.print(F("%  Temperature: "));
    Serial.print(intF);
    Serial.println(F("°F "));

    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Time: ");
    display.println(elapsedTime);
    display.print("Humidity: ");
    display.println(h);
    display.print("Temperature: ");
    display.println(intF);
    display.display();
    humidity = h;
    highHumidity = (humidity > 65.0);
    digitalWrite(BOTTOM_RED,highHumidity);
    timer = millis();
  }
  vTaskDelay(10);
  
}

void doThisOnConnect() {
  /* add your custom code here */
  Serial.println("Board successfully connected to Arduino IoT Cloud");
  digitalWrite(BLUE, LOW);
  digitalWrite(YELLOW, LOW);
  digitalWrite(BOTTOM_RED, LOW);
  digitalWrite(BOTTOM_GREEN, LOW);
  digitalWrite(TOP_RED, LOW);
  digitalWrite(TOP_GREEN, LOW);
  blueLED = false;
  highHumidity = false;
  elapsedTime = getReadableTime();
}

void doThisOnDisconnect() {
  /* add your custom code here */
  Serial.println("Board disconnected from Arduino IoT Cloud");
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  delay(1000);
}

/*
  Since BlueLED is READ_WRITE variable, onBlueLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBlueLEDChange()  {
  // Add your code here to act upon BlueLED change
  digitalWrite(BLUE,!digitalRead(BLUE));
}

